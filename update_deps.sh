#!/bin/bash

# Script de mise √† jour des d√©pendances pour StockManager
# V√©rifie et met √† jour les packages Python en toute s√©curit√©

set -e

echo "üîÑ Mise √† jour des d√©pendances StockManager"

# Couleurs
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

print_info() {
    echo -e "${YELLOW}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier l'environnement virtuel
if [[ "$VIRTUAL_ENV" == "" ]]; then
    print_error "Environnement virtuel non activ√©"
    print_info "Activez l'environnement virtuel avec : source .venv/bin/activate"
    exit 1
fi

print_success "Environnement virtuel activ√© : $VIRTUAL_ENV"

# Sauvegarde des requirements actuels
print_info "Sauvegarde des requirements actuels..."
cp requirements.txt "requirements.txt.backup.$(date +%Y%m%d_%H%M%S)"
print_success "Sauvegarde cr√©√©e"

# Afficher les packages actuels
print_info "Packages actuellement install√©s :"
pip list --format=columns

# V√©rifier les packages obsol√®tes
print_info "V√©rification des packages obsol√®tes..."
OUTDATED=$(pip list --outdated --format=json)

if [ "$OUTDATED" = "[]" ]; then
    print_success "Tous les packages sont √† jour !"
    exit 0
fi

echo "$OUTDATED" | python3 -m json.tool

# Demander confirmation
echo ""
read -p "Voulez-vous mettre √† jour les packages ? (y/N) " -n 1 -r
echo ""

if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    print_info "Mise √† jour annul√©e"
    exit 0
fi

# Mise √† jour en mode dry-run d'abord
print_info "Test de mise √† jour (dry-run)..."

# Packages critiques √† ne pas mettre √† jour automatiquement
CRITICAL_PACKAGES="Django"

# Mise √† jour des packages non critiques
print_info "Mise √† jour des packages..."

# Mise √† jour de pip d'abord
pip install --upgrade pip

# Mise √† jour des autres packages (sauf Django pour √©viter les breaking changes)
pip install --upgrade Pillow coverage pytest pytest-django gunicorn

print_success "Packages mis √† jour"

# G√©n√©ration du nouveau requirements.txt
print_info "G√©n√©ration du nouveau requirements.txt..."
pip freeze | grep -E "(Django|Pillow|coverage|pytest|gunicorn)" > requirements_new.txt

# V√©rification que Django n'a pas √©t√© mis √† jour de mani√®re majeure
DJANGO_VERSION=$(pip show Django | grep Version | cut -d ' ' -f 2)
print_info "Version Django actuelle : $DJANGO_VERSION"

# Tests de r√©gression
print_info "Ex√©cution des tests de r√©gression..."
if python manage.py test --verbosity=0; then
    print_success "Tests pass√©s avec les nouvelles d√©pendances"
    mv requirements_new.txt requirements.txt
    print_success "requirements.txt mis √† jour"
else
    print_error "Les tests ont √©chou√© avec les nouvelles d√©pendances"
    print_info "Restauration de l'ancienne version..."
    pip install -r requirements.txt
    rm requirements_new.txt
    exit 1
fi

# Affichage final
print_info "Nouvelles d√©pendances :"
cat requirements.txt

print_success "üéâ Mise √† jour termin√©e avec succ√®s !"
print_info "N'oubliez pas de :"
print_info "  1. Tester l'application compl√®tement"
print_info "  2. Commiter les changements si tout fonctionne"
print_info "  3. Mettre √† jour l'image Docker si n√©cessaire"
